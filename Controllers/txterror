const dotenv = require('dotenv').config();
const {
  AppError
} = require('../utils/Error');

const invalidInput = (err) => {
  const messageDisplay = `Invalid input ${err.value} at ${err.path}`;
  return new AppError(messageDisplay, 400);
};

const difficultyRatherThanEnum = (err) => {
  var {
    errors: {
      difficulty: {
        name,
        message,
        value
      },
    },
  } = err;
  const messageDisplay = `${message} and ${value} is not a valid option`;
  return new AppError(messageDisplay, 400);
};
const dataDuplicacy = (err) => {
  const messageDisplay = `Data duplicacy is not allowed`;
  return new AppError(messageDisplay, 400);
};

const handleDuplicateAndAlphabetError = (err) => {
  var {
    errors: {
      name: {
        kind,
        name,
        message
      },
    },
  } = err;
  const messageDisplay = `${message}`;
  return new AppError(messageDisplay, 400);
};

const requiredError = (err) => {
  var {
    errors: {
      name: {

        message
      },
    },
  } = err;
  const messageDisplay = `${message}`;
  return new AppError(messageDisplay, 400);
};
const requiredErrorPrice = (err) => {
  var {
    errors: {
      price: {

        message
      },
    },
  } = err;
  const messageDisplay = `${message}`;
  return new AppError(messageDisplay, 400);
};

const handleInvalidObjectIdError = (err) => {
  var message = `Invalid path ${err.path} and value ${err.value}`;
  return new AppError(message, 400);
};

const sendErrorDev = (err, response) => {
  response.status(err.statusCode).json({
    status: err.status,
    statusCode: err.statusCode,
    error: err,
    message: err.message,
    stack: err.stack,
  });
};
const sendErrorProd = (err, response) => {
  //OPERATIONAL ERROR, TRUSTED ERROR. SEND MESSAGE TO CLIENT
  if (err.isOperationalError) {
    response.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });
  }
  //PROGRAMMING OR UNKNOWN ERROR LIKE SOME NPM PACkAGE GOT DEPRICATED : DONT LEAK ERROR DETAILS
  else {
    //CONSOLE PROGRAMIING ERROR
    // console.error(`Error : ${err}`);
    //SEND MESSAGE TO CLIENT
    response.status(500).json({
      status: 'error',
      message: 'Something went very wrong!! ',
    });
  }
};

module.exports = (err, request, response, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'ERROR NOT DEFINED IN APPLICATION';
  return response.send(err)

  // console.log(err.hasOwnProperty('kind'))
  if (process.env.NODE_ENV == 'development') {
    let error = {
      ...err,
    };
    // return response.send(error)
    if (error.hasOwnProperty('code')) {
      if (error.code == 11000) {
        error = dataDuplicacy(error);
      }
    } else if (error.hasOwnProperty('kind')) {
      if (error.kind == 'ObjectId') {
        error = handleInvalidObjectIdError(error);
      } else if (error.kind == 'Number') {
        error = invalidInput(error);
      }
    } else if (error.errors.hasOwnProperty('difficulty')) {
      if (error.errors.difficulty.kind == 'enum') {
        // error.statusCode = 400
        error = difficultyRatherThanEnum(error);
      }
    } else if (error.errors.hasOwnProperty('name')) {
      if (error.errors.name.kind == 'required') {
        error = requiredError(error);
      } else if (error.errors.name.kind == 'user defined') {
        error = handleDuplicateAndAlphabetError(error);
      }

    } else if (error.errors.hasOwnProperty('price')) {
      if (error.errors.price.kind == 'required') {
        error = requiredErrorPrice(error)
      }

    }

    sendErrorDev(error, response);
  } else if (process.env.NODE_ENV == 'production') {
    let error = {
      ...err,
    };
    if (error.hasOwnProperty('code')) {
      if (error.code == 11000) {
        error = dataDuplicacy(error);
      }
    } else if (error.hasOwnProperty('kind')) {
      if (error.kind == 'ObjectId') {
        error = handleInvalidObjectIdError(error);
      } else if (error.kind == 'Number') {
        error = invalidInput(error);
      }
    } else if (error.errors.hasOwnProperty('difficulty')) {
      if (error.errors.difficulty.kind == 'enum') {
        error = difficultyRatherThanEnum(error);
      }
    } else if (error.errors.hasOwnProperty('name')) {
      if (error.errors.name.kind == 'required') {
        error = requiredError(error);
      } else if (error.errors.name.kind == 'user defined') {
        error = handleDuplicateAndAlphabetError(error);
      }
    } else if (error.errors.hasOwnProperty('price')) {
      if (error.errors.price.kind == 'required') {
        error = requiredErrorPrice(error)
      }

    }

    sendErrorProd(error, response);
  }
};